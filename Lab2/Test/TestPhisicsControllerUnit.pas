unit TestPhisicsControllerUnit;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, PhisicsControllerUnit, System.Generics.Collections,
  ControllersUnit,
  MenuUnit, MainUnit, Test1Unit, TestsUnit;

type
  // Test methods for class PhisicsController

  TestPhisicsController = class(TTestCase)
  strict private
//    FPhisicsController: PhisicsController; было
  FPhisicsController: Controllers;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestgetMenu;
    procedure TestGetListAnswer;
    procedure getQuestCaption;
    procedure TestSetTest;
  end;

implementation

procedure TestPhisicsController.getQuestCaption;
var
  ReturnValue:TList<string>;
begin
  FPhisicsController.SetTest('ƒвижение с посто€нным ускорением');
  ReturnValue:=FPhisicsController.getQuest;
  CheckEquals(ReturnValue.First,'ƒайте определение материальной точки.');
  CheckNotEquals(ReturnValue.First, ' ');
end;

procedure TestPhisicsController.SetUp;
begin
  FPhisicsController := PhisicsController.Create;
//  FPhisicsController.SetTest('ƒвижение с посто€нным ускорением');
end;

procedure TestPhisicsController.TearDown;
begin
//  FPhisicsController.Free;   было
  FPhisicsController := nil;

end;

procedure TestPhisicsController.TestGetListAnswer;
var
  ReturnValue:TList<string>;
  ReturnValue2:TList<string>;
  Count:integer;
begin
  FPhisicsController.SetTest('ƒвижение с посто€нным ускорением');
  ReturnValue2:=FPhisicsController.getQuest;
  ReturnValue:=FPhisicsController.getAnswer;
  CheckEquals(ReturnValue.Items[0],'абстрактный объект (модель), не имеющий размеров, но обладающий другими характеристиками');
  CheckNotEquals(ReturnValue.Items[0],'aaaaaaa');
  CheckEquals(ReturnValue.Items[1],'это координата, которую имеет ћ“ в данный момент времени');
  CheckNotEquals(ReturnValue.Items[1],'nnnn');
  CheckEquals(ReturnValue.Count,10);
  CheckNotEquals(ReturnValue.Count,11);
  CheckEquals(ReturnValue2.Count,23);
  CheckNotEquals(ReturnValue2.Count,24);
end;

procedure TestPhisicsController.TestgetMenu;
var
  ReturnValue: TList<String>;
begin
  ReturnValue := FPhisicsController.getMenu;
  CheckEquals(ReturnValue.First, ReturnValue.Last);
 // CheckEquals(ReturnValue.Items[0],'Test2');
  CheckEquals(ReturnValue.Items[0],'ƒвижение с посто€нным ускорением');
  CheckEquals(ReturnValue.Count,1);
  // TODO: Validate method results
end;

procedure TestPhisicsController.TestSetTest;
var
  ReturnValue:TList<String>;
  ReturnValue2:TList<string>;
  Caption:string;
begin
  FPhisicsController.setTest('ƒвижение с посто€нным ускорением');
  caption:='ƒвижение с посто€нным ускорением';
  FPhisicsController.setTest(caption);
  ReturnValue:=FPhisicsController.getQuest;
  CheckEquals(ReturnValue.Items[0],'ƒайте определение материальной точки.');
  CheckNotEquals(ReturnValue.Items[0],' ак определ€етс€ положение материальной точки?');
  ReturnValue2:=FPhisicsController.getQuest;
  CheckEquals(ReturnValue2.Items[0],'ƒайте определение материальной точки.');
  CheckNotEquals(ReturnValue2.Items[0],' ак определ€етс€ положение материальной точки?');
  CheckNotEquals(ReturnValue.Items[0],ReturnValue2.Items[1]);
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestPhisicsController.Suite);

end.
