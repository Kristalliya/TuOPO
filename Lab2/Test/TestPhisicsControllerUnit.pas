unit TestPhisicsControllerUnit;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, PhisicsControllerUnit, System.Generics.Collections,
  ControllersUnit;

type
  // Test methods for class PhisicsController

  TestPhisicsController = class(TTestCase)
  strict private
//    FPhisicsController: PhisicsController; было
  FPhisicsController: Controllers;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestgetMenu;
    procedure TestCheckEqualsMenu;
    procedure TestFailEqualsMenu;
    procedure TestCheckSameMenu;
  end;

implementation

procedure TestPhisicsController.SetUp;
begin
  FPhisicsController := PhisicsController.Create;
end;

procedure TestPhisicsController.TearDown;
begin
//  FPhisicsController.Free;   было
  FPhisicsController := nil;
end;

procedure TestPhisicsController.TestCheckEqualsMenu;
var
  ReturnValue: TList<String>;
begin
  ReturnValue:=TList<String>.Create;
  ReturnValue := FPhisicsController.getMenu;
  CheckEquals(ReturnValue.First,'Test1');
end;

procedure TestPhisicsController.TestCheckSameMenu;
var
  ReturnValue: TList<String>;
begin
  ReturnValue:=TList<String>.Create;
  ReturnValue := FPhisicsController.getMenu;
  CheckEquals(ReturnValue.items[0],ReturnValue.items[1]);  //expected: <Test1> but was: <Test2>
end;

procedure TestPhisicsController.TestFailEqualsMenu;
var
  ReturnValue: TList<String>;
begin
  ReturnValue:=TList<String>.Create;
  ReturnValue := FPhisicsController.getMenu;
  FailEquals(ReturnValue.Last,'Test1');        //expected and actual were: <Test2>
end;

procedure TestPhisicsController.TestgetMenu;
var
  ReturnValue: TList<String>;
begin
  ReturnValue := FPhisicsController.getMenu;
  // TODO: Validate method results
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestPhisicsController.Suite);

end.
